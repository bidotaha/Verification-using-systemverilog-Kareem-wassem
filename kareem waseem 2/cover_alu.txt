Coverage Report by instance with details

=================================================================================
=== Instance: /ALU/o
=== Design Unit: work.ALSU
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        32        26         6    81.25%

================================Branch Details================================

Branch Coverage for instance /ALU/o

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
------------------------------------IF Branch------------------------------------
    24                                     90861     Count coming in to IF
    24              1                       1718       if(rst) begin
    35              1                      89143       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    51                                    180862     Count coming in to IF
    51              1                      91717       if(rst) begin
    53              1                      89145       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    54                                     89145     Count coming in to IF
    54              1                      55733           if (invalid)
    56              1                      33412           else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    63                                     90818     Count coming in to IF
    63              1                       1716       if(rst) begin
    66              1                      89102       else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    67                                     89102     Count coming in to IF
    67              1                       3526         if (bypass_A_reg && bypass_B_reg)
    69              1                      14102         else if (bypass_A_reg)
    71              1                      14126         else if (bypass_B_reg)
    73              1                      35702         else if (invalid) 
    75              1                      21646         else begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    76                                     21646     Count coming in to CASE
    77              1                    ***0***               3'h0: begin 
    87              1                       3948               3'h1: begin
    97              1                       3986               3'h2: out <= A_reg + B_reg;
    98              1                       3978               3'h3: out <= A_reg * B_reg;
    99              1                       4015               3'h4: begin
    105             1                       4109               3'h5: begin
                                            1610     All False Count
Branch totals: 6 hits of 7 branches = 85.71%

------------------------------------IF Branch------------------------------------
    78                                   ***0***     Count coming in to IF
    78              1                    ***0***                 if (red_op_A_reg && red_op_B_reg)
    80              1                    ***0***                 else if (red_op_A_reg) 
    82              1                    ***0***                 else if (red_op_B_reg)
    84              1                    ***0***                 else 
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    88                                      3948     Count coming in to IF
    88              1                    ***0***                 if (red_op_A_reg && red_op_B_reg)
    90              1                        324                 else if (red_op_A_reg) 
    92              1                        329                 else if (red_op_B_reg)
    94              1                       3295                 else 
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    100                                     4015     Count coming in to IF
    100             1                       1928                 if (direction_reg)
    102             1                       2087                 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    106                                     4109     Count coming in to IF
    106             1                       1976                 if (direction_reg)
    108             1                       2133                 else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         2         4    33.33%

================================Condition Details================================

Condition Coverage for instance /ALU/o --

  File ALSU.v
----------------Focused Condition View-------------------
Line       67 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         Y
  bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:          1  bypass_A_reg_1        bypass_B_reg                  
  Row   3:          1  bypass_B_reg_0        bypass_A_reg                  
  Row   4:          1  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       78 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 0 of 2 input terms covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         N  No hits                  Hit '_0' and '_1'
  red_op_B_reg         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  red_op_A_reg_0        -                             
  Row   2:    ***0***  red_op_A_reg_1        red_op_B_reg                  
  Row   3:    ***0***  red_op_B_reg_0        red_op_A_reg                  
  Row   4:    ***0***  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       88 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 0 of 2 input terms covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         N  '_1' not hit             Hit '_1'
  red_op_B_reg         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:    ***0***  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:    ***0***  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /ALU/o --

  File ALSU.v
----------------Focused Expression View-----------------
Line       18 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]))
Expression totals: 4 of 4 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         Y
   red_op_B_reg         Y
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   2:          1  red_op_A_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   6:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   7:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   8:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])

----------------Focused Expression View-----------------
Line       19 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       20 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      48        43         5    89.58%

================================Statement Details================================

Statement Coverage for instance /ALU/o --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
    1                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    2                                                parameter INPUT_PRIORITY = "A";
    3                                                parameter FULL_ADDER = "ON";
    4                                                input clk, cin, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    5                                                input [2:0] opcode;
    6                                                input signed [2:0] A, B;
    7                                                output reg [15:0] leds;
    8                                                output reg signed [5:0] out;
    9                                                
    10                                               reg red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    11                                               reg signed cin_reg;
    12                                               reg [2:0] opcode_reg;
    13                                               reg signed [2:0] A_reg, B_reg;
    14                                               
    15                                               wire invalid_red_op, invalid_opcode, invalid;
    16                                               
    17                                               //Invalid handling
    18              1                      85473     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);
    19              1                      74836     assign invalid_opcode = opcode_reg[1] & opcode_reg[2];
    20              1                      49945     assign invalid = invalid_red_op | invalid_opcode;
    21                                               
    22                                               //Registering input signals
    23              1                      90861     always @(posedge clk or posedge rst) begin
    24                                                 if(rst) begin
    25              1                       1718          cin_reg <= 0;
    26              1                       1718          red_op_B_reg <= 0;
    27              1                       1718          red_op_A_reg <= 0;
    28              1                       1718          bypass_B_reg <= 0;
    29              1                       1718          bypass_A_reg <= 0;
    30              1                       1718          direction_reg <= 0;
    31              1                       1718          serial_in_reg <= 0;
    32              1                       1718          opcode_reg <= 0;
    33              1                       1718          A_reg <= 0;
    34              1                       1718          B_reg <= 0;
    35                                                 end else begin
    36              1                      89143          cin_reg <= cin;
    37              1                      89143          red_op_B_reg <= red_op_B;
    38              1                      89143          red_op_A_reg <= red_op_A;
    39              1                      89143          bypass_B_reg <= bypass_B;
    40              1                      89143          bypass_A_reg <= bypass_A;
    41              1                      89143          direction_reg <= direction;
    42              1                      89143          serial_in_reg <= serial_in;
    43              1                      89143          opcode_reg <= opcode;
    44              1                      89143          A_reg <= A;
    45              1                      89143          B_reg <= B;
    46                                                 end
    47                                               end
    48                                               
    49                                               //leds output blinking 
    50              1                     180862     always @(posedge clk or posedge rst) begin
    51                                                 if(rst) begin
    52              1                      91717          leds <= 0;
    53                                                 end else begin
    54                                                     if (invalid)
    55              1                      55733             leds <= ~leds;
    56                                                     else
    57              1                      33412             leds <= 0;
    58                                                 end
    59                                               end
    60                                               
    61                                               //ALSU output processing
    62              1                      90818     always @(posedge clk or posedge rst) begin
    63                                                 if(rst) begin
    64              1                       1716         out <= 0;
    65                                                 end
    66                                                 else begin
    67                                                   if (bypass_A_reg && bypass_B_reg)
    68              1                       3526           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    69                                                   else if (bypass_A_reg)
    70              1                      14102           out <= A_reg;
    71                                                   else if (bypass_B_reg)
    72              1                      14126           out <= B_reg;
    73                                                   else if (invalid) 
    74              1                      35702             out <= 0;
    75                                                   else begin
    76                                                       case (opcode)
    77                                                         3'h0: begin 
    78                                                           if (red_op_A_reg && red_op_B_reg)
    79              1                    ***0***                   out <= (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    80                                                           else if (red_op_A_reg) 
    81              1                    ***0***                   out <= |A_reg;
    82                                                           else if (red_op_B_reg)
    83              1                    ***0***                   out <= |B_reg;
    84                                                           else 
    85              1                    ***0***                   out <= A_reg | B_reg;
    86                                                         end
    87                                                         3'h1: begin
    88                                                           if (red_op_A_reg && red_op_B_reg)
    89              1                    ***0***                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
    90                                                           else if (red_op_A_reg) 
    91              1                        324                   out <= ^A_reg;
    92                                                           else if (red_op_B_reg)
    93              1                        329                   out <= ^B_reg;
    94                                                           else 
    95              1                       3295                   out <= A_reg ^ B_reg;
    96                                                         end
    97              1                       3986               3'h2: out <= A_reg + B_reg;
    98              1                       3978               3'h3: out <= A_reg * B_reg;
    99                                                         3'h4: begin
    100                                                          if (direction_reg)
    101             1                       1928                   out <= {out[4:0], serial_in_reg};
    102                                                          else
    103             1                       2087                   out <= {serial_in_reg, out[5:1]};
    104                                                        end
    105                                                        3'h5: begin
    106                                                          if (direction_reg)
    107             1                       1976                   out <= {out[4:0], out[5]};
    108                                                          else
    109             1                       2133                   out <= {out[0], out[5:1]};

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        118       118         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /ALU/o --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[0-2]           1           1      100.00 
                                        A_reg[2-0]           1           1      100.00 
                                            B[0-2]           1           1      100.00 
                                        B_reg[2-0]           1           1      100.00 
                                          bypass_A           1           1      100.00 
                                      bypass_A_reg           1           1      100.00 
                                          bypass_B           1           1      100.00 
                                      bypass_B_reg           1           1      100.00 
                                               cin           1           1      100.00 
                                           cin_reg           1           1      100.00 
                                               clk           1           1      100.00 
                                         direction           1           1      100.00 
                                     direction_reg           1           1      100.00 
                                           invalid           1           1      100.00 
                                    invalid_opcode           1           1      100.00 
                                    invalid_red_op           1           1      100.00 
                                        leds[15-0]           1           1      100.00 
                                       opcode[0-2]           1           1      100.00 
                                   opcode_reg[2-0]           1           1      100.00 
                                          out[5-0]           1           1      100.00 
                                          red_op_A           1           1      100.00 
                                      red_op_A_reg           1           1      100.00 
                                          red_op_B           1           1      100.00 
                                      red_op_B_reg           1           1      100.00 
                                               rst           1           1      100.00 
                                         serial_in           1           1      100.00 
                                     serial_in_reg           1           1      100.00 

Total Node Count     =         59 
Toggled Node Count   =         59 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (118 of 118 bins)

=================================================================================
=== Instance: /ALU/O2
=== Design Unit: work.ALSU
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        32        26         6    81.25%

================================Branch Details================================

Branch Coverage for instance /ALU/O2

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
------------------------------------IF Branch------------------------------------
    24                                     90861     Count coming in to IF
    24              1                       1718       if(rst) begin
    35              1                      89143       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    51                                    180862     Count coming in to IF
    51              1                      91717       if(rst) begin
    53              1                      89145       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    54                                     89145     Count coming in to IF
    54              1                      55733           if (invalid)
    56              1                      33412           else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    63                                     90818     Count coming in to IF
    63              1                       1716       if(rst) begin
    66              1                      89102       else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    67                                     89102     Count coming in to IF
    67              1                       3526         if (bypass_A_reg && bypass_B_reg)
    69              1                      14102         else if (bypass_A_reg)
    71              1                      14126         else if (bypass_B_reg)
    73              1                      35702         else if (invalid) 
    75              1                      21646         else begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    76                                     21646     Count coming in to CASE
    77              1                    ***0***               3'h0: begin 
    87              1                       3948               3'h1: begin
    97              1                       3986               3'h2: out <= A_reg + B_reg;
    98              1                       3978               3'h3: out <= A_reg * B_reg;
    99              1                       4015               3'h4: begin
    105             1                       4109               3'h5: begin
                                            1610     All False Count
Branch totals: 6 hits of 7 branches = 85.71%

------------------------------------IF Branch------------------------------------
    78                                   ***0***     Count coming in to IF
    78              1                    ***0***                 if (red_op_A_reg && red_op_B_reg)
    80              1                    ***0***                 else if (red_op_A_reg) 
    82              1                    ***0***                 else if (red_op_B_reg)
    84              1                    ***0***                 else 
Branch totals: 0 hits of 4 branches = 0.00%

------------------------------------IF Branch------------------------------------
    88                                      3948     Count coming in to IF
    88              1                    ***0***                 if (red_op_A_reg && red_op_B_reg)
    90              1                        324                 else if (red_op_A_reg) 
    92              1                        329                 else if (red_op_B_reg)
    94              1                       3295                 else 
Branch totals: 3 hits of 4 branches = 75.00%

------------------------------------IF Branch------------------------------------
    100                                     4015     Count coming in to IF
    100             1                       1928                 if (direction_reg)
    102             1                       2087                 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    106                                     4109     Count coming in to IF
    106             1                       1976                 if (direction_reg)
    108             1                       2133                 else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         2         4    33.33%

================================Condition Details================================

Condition Coverage for instance /ALU/O2 --

  File ALSU.v
----------------Focused Condition View-------------------
Line       67 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         Y
  bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:          1  bypass_A_reg_1        bypass_B_reg                  
  Row   3:          1  bypass_B_reg_0        bypass_A_reg                  
  Row   4:          1  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       78 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 0 of 2 input terms covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         N  No hits                  Hit '_0' and '_1'
  red_op_B_reg         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  red_op_A_reg_0        -                             
  Row   2:    ***0***  red_op_A_reg_1        red_op_B_reg                  
  Row   3:    ***0***  red_op_B_reg_0        red_op_A_reg                  
  Row   4:    ***0***  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       88 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 0 of 2 input terms covered = 0.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         N  '_1' not hit             Hit '_1'
  red_op_B_reg         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:    ***0***  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:    ***0***  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /ALU/O2 --

  File ALSU.v
----------------Focused Expression View-----------------
Line       18 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]))
Expression totals: 4 of 4 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         Y
   red_op_B_reg         Y
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   2:          1  red_op_A_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   6:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   7:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   8:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])

----------------Focused Expression View-----------------
Line       19 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       20 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      48        43         5    89.58%

================================Statement Details================================

Statement Coverage for instance /ALU/O2 --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
    1                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    2                                                parameter INPUT_PRIORITY = "A";
    3                                                parameter FULL_ADDER = "ON";
    4                                                input clk, cin, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    5                                                input [2:0] opcode;
    6                                                input signed [2:0] A, B;
    7                                                output reg [15:0] leds;
    8                                                output reg signed [5:0] out;
    9                                                
    10                                               reg red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    11                                               reg signed cin_reg;
    12                                               reg [2:0] opcode_reg;
    13                                               reg signed [2:0] A_reg, B_reg;
    14                                               
    15                                               wire invalid_red_op, invalid_opcode, invalid;
    16                                               
    17                                               //Invalid handling
    18              1                      85473     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);
    19              1                      74836     assign invalid_opcode = opcode_reg[1] & opcode_reg[2];
    20              1                      49945     assign invalid = invalid_red_op | invalid_opcode;
    21                                               
    22                                               //Registering input signals
    23              1                      90861     always @(posedge clk or posedge rst) begin
    24                                                 if(rst) begin
    25              1                       1718          cin_reg <= 0;
    26              1                       1718          red_op_B_reg <= 0;
    27              1                       1718          red_op_A_reg <= 0;
    28              1                       1718          bypass_B_reg <= 0;
    29              1                       1718          bypass_A_reg <= 0;
    30              1                       1718          direction_reg <= 0;
    31              1                       1718          serial_in_reg <= 0;
    32              1                       1718          opcode_reg <= 0;
    33              1                       1718          A_reg <= 0;
    34              1                       1718          B_reg <= 0;
    35                                                 end else begin
    36              1                      89143          cin_reg <= cin;
    37              1                      89143          red_op_B_reg <= red_op_B;
    38              1                      89143          red_op_A_reg <= red_op_A;
    39              1                      89143          bypass_B_reg <= bypass_B;
    40              1                      89143          bypass_A_reg <= bypass_A;
    41              1                      89143          direction_reg <= direction;
    42              1                      89143          serial_in_reg <= serial_in;
    43              1                      89143          opcode_reg <= opcode;
    44              1                      89143          A_reg <= A;
    45              1                      89143          B_reg <= B;
    46                                                 end
    47                                               end
    48                                               
    49                                               //leds output blinking 
    50              1                     180862     always @(posedge clk or posedge rst) begin
    51                                                 if(rst) begin
    52              1                      91717          leds <= 0;
    53                                                 end else begin
    54                                                     if (invalid)
    55              1                      55733             leds <= ~leds;
    56                                                     else
    57              1                      33412             leds <= 0;
    58                                                 end
    59                                               end
    60                                               
    61                                               //ALSU output processing
    62              1                      90818     always @(posedge clk or posedge rst) begin
    63                                                 if(rst) begin
    64              1                       1716         out <= 0;
    65                                                 end
    66                                                 else begin
    67                                                   if (bypass_A_reg && bypass_B_reg)
    68              1                       3526           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    69                                                   else if (bypass_A_reg)
    70              1                      14102           out <= A_reg;
    71                                                   else if (bypass_B_reg)
    72              1                      14126           out <= B_reg;
    73                                                   else if (invalid) 
    74              1                      35702             out <= 0;
    75                                                   else begin
    76                                                       case (opcode)
    77                                                         3'h0: begin 
    78                                                           if (red_op_A_reg && red_op_B_reg)
    79              1                    ***0***                   out <= (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    80                                                           else if (red_op_A_reg) 
    81              1                    ***0***                   out <= |A_reg;
    82                                                           else if (red_op_B_reg)
    83              1                    ***0***                   out <= |B_reg;
    84                                                           else 
    85              1                    ***0***                   out <= A_reg | B_reg;
    86                                                         end
    87                                                         3'h1: begin
    88                                                           if (red_op_A_reg && red_op_B_reg)
    89              1                    ***0***                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
    90                                                           else if (red_op_A_reg) 
    91              1                        324                   out <= ^A_reg;
    92                                                           else if (red_op_B_reg)
    93              1                        329                   out <= ^B_reg;
    94                                                           else 
    95              1                       3295                   out <= A_reg ^ B_reg;
    96                                                         end
    97              1                       3986               3'h2: out <= A_reg + B_reg;
    98              1                       3978               3'h3: out <= A_reg * B_reg;
    99                                                         3'h4: begin
    100                                                          if (direction_reg)
    101             1                       1928                   out <= {out[4:0], serial_in_reg};
    102                                                          else
    103             1                       2087                   out <= {serial_in_reg, out[5:1]};
    104                                                        end
    105                                                        3'h5: begin
    106                                                          if (direction_reg)
    107             1                       1976                   out <= {out[4:0], out[5]};
    108                                                          else
    109             1                       2133                   out <= {out[0], out[5:1]};

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        118       118         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /ALU/O2 --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[0-2]           1           1      100.00 
                                        A_reg[2-0]           1           1      100.00 
                                            B[0-2]           1           1      100.00 
                                        B_reg[2-0]           1           1      100.00 
                                          bypass_A           1           1      100.00 
                                      bypass_A_reg           1           1      100.00 
                                          bypass_B           1           1      100.00 
                                      bypass_B_reg           1           1      100.00 
                                               cin           1           1      100.00 
                                           cin_reg           1           1      100.00 
                                               clk           1           1      100.00 
                                         direction           1           1      100.00 
                                     direction_reg           1           1      100.00 
                                           invalid           1           1      100.00 
                                    invalid_opcode           1           1      100.00 
                                    invalid_red_op           1           1      100.00 
                                        leds[15-0]           1           1      100.00 
                                       opcode[0-2]           1           1      100.00 
                                   opcode_reg[2-0]           1           1      100.00 
                                          out[5-0]           1           1      100.00 
                                          red_op_A           1           1      100.00 
                                      red_op_A_reg           1           1      100.00 
                                          red_op_B           1           1      100.00 
                                      red_op_B_reg           1           1      100.00 
                                               rst           1           1      100.00 
                                         serial_in           1           1      100.00 
                                     serial_in_reg           1           1      100.00 

Total Node Count     =         59 
Toggled Node Count   =         59 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (118 of 118 bins)

=================================================================================
=== Instance: /ALU
=== Design Unit: work.ALU
=================================================================================

Assertion Coverage:
    Assertions                       2         2         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/ALU/#ublk#17941#34/immed__35
                     ALU.sv(35)                         0          1
/ALU/#ublk#17941#54/immed__55
                     ALU.sv(55)                         0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /ALU

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALU.sv
------------------------------------IF Branch------------------------------------
    68                                    180003     Count coming in to IF
    68              1                    ***0***           if ((out_ex != out) || (leds_ex != leds)) begin
    72              1                     180003           else 
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /ALU --

  File ALU.sv
----------------Focused Condition View-------------------
Line       68 Item    1  ((out_ex != out) || (leds_ex != leds))
Condition totals: 0 of 2 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
    (out_ex != out)         N  '_1' not hit             Hit '_1'
  (leds_ex != leds)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  (out_ex != out)_0     ~(leds_ex != leds)            
  Row   2:    ***0***  (out_ex != out)_1     -                             
  Row   3:          1  (leds_ex != leds)_0   ~(out_ex != out)              
  Row   4:    ***0***  (leds_ex != leds)_1   ~(out_ex != out)              


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      33        31         2    93.93%

================================Statement Details================================

Statement Coverage for instance /ALU --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALU.sv
    2                                                module ALU ();
    3                                                    parameter INPUT_PRIORITY = "A";
    4                                                    parameter FULL_ADDER = "ON";
    5                                                    logic clk, cin, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    6                                                    logic [2:0] opcode;
    7                                                    logic signed [2:0] A, B;
    8                                                    logic [15:0] leds;
    9                                                    bit [15:0] leds_ex;
    10                                                   logic [5:0] out;
    11                                                   bit [5:0] out_ex;
    12                                               
    13                                                   int error_counter = 0;
    14                                                   int correct_counter = 0;
    15                                                
    16                                                   ALSU o (A,B,cin,serial_in,red_op_A,red_op_B,opcode,bypass_A,bypass_B,clk,rst,direction,leds,out);
    17                                                   ALSU O2 (A,B,cin,serial_in,red_op_A,red_op_B,opcode,bypass_A,bypass_B,clk,rst,direction,leds_ex,out_ex);
    18                                               
    19                                                       initial begin
    20              1                          1             clk = 0;
    21              1                          1             forever begin
    22              1                     360013                 #1 clk = ~clk;
    22              2                     360012     
    23                                                       end
    24                                                   end
    25                                               
    26                                                   ALU_class my_alu;
    27                                                   initial begin
    28                                               
    29                                                       //
    30              1                          1             cheack_reset;
    31                                               
    32                                                       //
    33              1                          1             my_alu = new;
    34              1                      90000             repeat (90000) begin
    35                                                           assert (my_alu.randomize());
    36              1                      90000                 rst = my_alu.rst;
    37              1                      90000                 red_op_A = my_alu.red_op_A;
    38              1                      90000                 red_op_B = my_alu.red_op_B;
    39              1                      90000                 bypass_A = my_alu.bypass_A;
    40              1                      90000                 bypass_B = my_alu.bypass_B;
    41              1                      90000                 direction = my_alu.direction;
    42              1                      90000                 cin = my_alu.cin;
    43              1                      90000                 serial_in = my_alu.serial;
    44              1                      90000                 A = my_alu.A;
    45              1                      90000                 B = my_alu.B;
    46              1                      90000                 opcode = my_alu.my_opcode;
    47              1                      90000                 cheack_result;
    48                                                       end
    49                                               
    50                                                       //
    51              1                          1             cheack_reset;
    52                                               
    53                                                       //
    54              1                      90000             repeat (90000) begin
    55                                                           assert (my_alu.randomize());
    56              1                      90000                 cheack_result ;
    57                                                       end
    58                                               
    59                                                       //
    60              1                          1             cheack_reset;        
    61                                               
    62              1                          1                 $display("error_counter = %d  correct_counter = %d",error_counter,correct_counter);
    63              1                          1                 $stop;  
    64                                                   end
    65                                               
    66                                                  task cheack_result ;
    67              1                     180003           @(negedge clk);
    68                                                     if ((out_ex != out) || (leds_ex != leds)) begin
    69              1                    ***0***              $display("%t error",$time);
    70              1                    ***0***              error_counter++;
    71                                                     end
    72                                                     else 
    73              1                     180003             correct_counter++;   
    74                                                      
    75                                                  endtask
    76                                               
    77                                                  task cheack_reset ;
    78              1                          3             rst = 0;
    79              1                          3             @(negedge clk);
    80              1                          3             cheack_result ;
    81              1                          3             rst = 1;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        252       159        93    63.09%

================================Toggle Details================================

Toggle Coverage for instance /ALU --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[0-2]           1           1      100.00 
                                            B[0-2]           1           1      100.00 
                                          bypass_A           1           1      100.00 
                                          bypass_B           1           1      100.00 
                                               cin           1           1      100.00 
                                               clk           1           1      100.00 
                             correct_counter[0-16]           1           1      100.00 
                               correct_counter[17]           0           1       50.00 
                            correct_counter[18-31]           0           0        0.00 
                                         direction           1           1      100.00 
                               error_counter[0-31]           0           0        0.00 
                                        leds[0-15]           1           1      100.00 
                                     leds_ex[0-15]           1           1      100.00 
                                       opcode[0-2]           1           1      100.00 
                                          out[0-5]           1           1      100.00 
                                       out_ex[0-5]           1           1      100.00 
                                          red_op_A           1           1      100.00 
                                          red_op_B           1           1      100.00 
                                               rst           1           1      100.00 
                                         serial_in           1           1      100.00 

Total Node Count     =        126 
Toggled Node Count   =         79 
Untoggled Node Count =         47 

Toggle Coverage      =      63.09% (159 of 252 bins)


ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/ALU/#ublk#17941#34/immed__35
                     ALU.sv(35)                         0          1
/ALU/#ublk#17941#54/immed__55
                     ALU.sv(55)                         0          1

Total Coverage By Instance (filtered view): 80.08%

